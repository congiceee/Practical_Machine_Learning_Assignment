Training<-read.csv('pml-training.csv')
head(Training)
names(Training)
unique(Training$classe)
dim(Training)
sort(unique(names(Training))
)
head(Training)
unique(Training$user_name)
dim(Training)
dim(Training)[1]
TRA<-read.csv('pml-training.csv')
k<-NULL
for (i in 1:dim(TRA)[2])
{
k<-c(k,sum(is.na(TRA[,i])))
}
k
dim(TRA)[1]
as.logical(k)
as.logical(-k)
-as.logical(k)
TRA<-read.csv('pml-training.csv',header=TRUE)
dim(TRA)
TRA<-read.csv('pml-training.csv',header=FALSE)
dim(TRA)
TRA<-read.csv('pml-training.csv')
TRA<-read.csv('pml-training.csv',header=FALSE)
head(TRA)
TRA<-read.csv('pml-training.csv')
head(TRA)
dim(TRA)
sum(k)
k
sum(k)/19216
length(k)-67
TRA<-read.csv('pml-training.csv',na.strings = c('NA',''))
head(TRA)
k<-NULL
for (i in 1:dim(TRA)[2])
{
k<-c(k,sum(is.na(TRA[,i])))
}
k
sum(k)/19216
length(k)
k<-NULL
for (i in 1:dim(TRA)[2])
{
k<-c(k,sum(!is.na(TRA[,i])))
}
k
k<-factor(k,c('1','0'))
k
k<-as.factor(k,c('1','0'))
k<-NULL
for (i in 1:dim(TRA)[2])
{
k<-c(k,sum(!is.na(TRA[,i])))
}
k<-as.factor(k,c('1','0'))
k<-as.factor(k
)
k
k<-as.factor(k,level=c(1,0))
k<-factor(k,level=c(1,0))
k
k<-NULL
for (i in 1:dim(TRA)[2])
{
k<-c(k,sum(!is.na(TRA[,i])))
}
k
class(k)
levels(k)<-c(1,0)
k
x <- gl(2, 4, 8)
levels(x)[1] <- "low"
levels(x)[2] <- "high"
x
?gl
k<-NULL
for (i in 1:dim(TRA)[2])
{
k<-c(k,sum(!is.na(TRA[,i])))
}
k1<-factor(k)
class(k1)
k1
levels(k1)<-c(0,1)
k1
sum(k1)
sum(as.numeric(k1))
sum(as.integer(k1))
as.integer(k1)
220-length(k1)
k1
faafkn<-TRA[,k1]
dim(faafkn)
k2<-as.logical(k1)
faafkn<-TRA[,k2]
faafkn<-TRA[k2]
faafkn<-TRA[,k2]
faafkn<-TRA[,1]
k1
faafkn<-TRA[,k1]
dim(faafkn)
class(k2)
k<-NULL
for (i in 1:dim(TRA)[2])
{
k<-c(k,sum(!is.na(TRA[,i])))
}
s<-NULL
for (i in 1:length(k))
{
if (k[i]==19622) {s<-c(s,i)}
}
s
length(s)
bakfu<-TRA[,s]
dim(bakfu)
s1<-s[-1]
s1
s1<-s[-1:7]
s1<-s[-1:-7]
s1
dim(s1)
length(s1)
TRA<-read.csv('pml-training.csv',na.strings = c('NA',''))
k<-NULL
for (i in 1:dim(TRA)[2])
{
k<-c(k,sum(!is.na(TRA[,i])))
}
id<-NULL
for (i in 1:length(k))
{
if (k[i]==19622) {id<-c(id,i)}
}
id<-id[-1:-7]
id
id-s
s1-id
Tra<-TRA[,id]
dim(Tra)
class(Tra$classe)
inTrain = createDataPartition(Tra$classes, p = 0.7)
library(caret)
inTrain = createDataPartition(Tra$classes, p = 0.7)
inTrain = createDataPartition(Tra$classes, p = 0.7)[[1]]
inTrain = createDataPartition(Tra$classe, p = 0.7)
str(inTrain)
inTrain = createDataPartition(Tra$classe, p = 0.7)[[1]]
str(inTrain)
inTrain
inTrain = createDataPartition(Tra$classe, p = 0.7)
inTrain
inTrain[[1]]
inTrain = createDataPartition(Tra$classe, p = 0.7)[[1]]
training = Tra[ inTrain,]
testing = Tra[-inTrain,]
inTrain = createDataPartition(Tra$classe, p = 0.7)
training = Tra[ inTrain,]
testing = Tra[-inTrain,]
library(randomForest)
set.seed(20170507)
rf_tra<-train(classe~.,method='rf',data=training)
library(gbm)
set.seed(20170507)
rf_tra<-train(classe~.,method='gbm',data=training)
rf_tra<-train(classe~.,method='rf',data=training)
rf_tra<-randomForest(classe~.,data=training)
rf_tra
rf_tra<-glm(classe~.,data=training)
rf_tra
406/19622
TRA <- read.csv('pml-training.csv', na.strings = c('NA', ''))
k <- NULL
for (i in 1:dim(TRA)[2])
{
k <- c(k, sum(!is.na(TRA[, i])))
}
id <- NULL
for (i in 1:length(k))
{
if (k[i] == 19622) {id <- c(id, i)}
}
id <- id[-1 : -7]
length(id)
Tra <- TRA[,id]
set.seed(20170507)
library(caret)
inTrain = createDataPartition(Tra$classe, p = 0.7)[[1]]
training = Tra[inTrain, ]
validating = Tra[-inTrain, ]
library(gbm)
set.seed(20170507)
rf_gbm <- gbm(classe ~ ., data = training)
rf_gbm_pre <- predict(rf_gbm, validating)
confusionMatrix(validating$classe, rf_gbm_pre)$overall[1]
rf_gbm_pre <- predict(rf_gbm, validating)
rf_gbm
rf_gbm_pre <- predict(rf_gbm, validating[,-53])
dim(validating)
dim(validating[,-53])
rf_gbm_pre <- predict(rf_gbm, validating[,-53])
rf_tra <- randomForest(classe ~ ., data = training)
rf_val_pre <- predict(rf_tra, validating)
confusionMatrix(validating$classe, rf_val_pre)$overall[1]
gbm_tra <- gbm(classe ~ ., data = training)
gbm_val_pre <- predict(gbm_tra, validating)
lasso_tra <- lasso(classe ~ ., data = training)
library(lasso)
install.packages("lasso")
library(MASS)
lasso_tra <- lasso(classe ~ ., data = training)
lda_tra <- lda(classe ~ ., data = training)
lda_val_pre <- predict(lda_tra, validating)
confusionMatrix(validating$classe, lda_val_pre)$overall[1]
confusionMatrix(validating$classe, lda_val_pre)
lda_val_pre
dim(lda_val_pre)
length(lda_val_pre)
rf_val_pre
library(elasticnet)
plot.enet(rf_tra$finalModel,xvar='penalty',use.color=TRUE)
rf_tra$finalModel
rf_tra
rf_tra$finalModel
plot.enet(rf_tra,xvar='penalty',use.color=TRUE)
varImp(rf_tra)
sort(varImp(rf_tra))
order(varImp(rf_tra))
rf_tra[order(varImp(rf_tra))]
order(varImp(rf_tra))
varImp(rf_tra)
varImp(rf_tra)$overall
rf_tra
rf_tra$class.error
confusionMatrix(validating$classe, rf_val_pre)
rf_tra$err.rate
rf_tra$importance
mean(rf_tra$err.rate)
1-mean(rf_tra$err.rate)
rf_tra$confusion
confusionMatrix(validating$classe, rf_val_pre)
